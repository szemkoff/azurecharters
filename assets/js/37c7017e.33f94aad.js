"use strict";(self.webpackChunkazure_yacht_group=self.webpackChunkazure_yacht_group||[]).push([[9582],{6600:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var i=s(4848),r=s(8453);const t={title:"Tilda API Troubleshooting Guide",sidebar_label:"Troubleshooting"},o="Tilda API Troubleshooting Guide",l={id:"tilda-api/troubleshooting",title:"Tilda API Troubleshooting Guide",description:"This guide provides solutions for common issues encountered with the Tilda API integration.",source:"@site/docs/tilda-api/troubleshooting.md",sourceDirName:"tilda-api",slug:"/tilda-api/troubleshooting",permalink:"/azurecharters/docs/tilda-api/troubleshooting",draft:!1,unlisted:!1,editUrl:"https://github.com/szemkoff/azurecharters/tree/main/docs/tilda-api/troubleshooting.md",tags:[],version:"current",frontMatter:{title:"Tilda API Troubleshooting Guide",sidebar_label:"Troubleshooting"},sidebar:"docsidebar",previous:{title:"Referral Page Guide",permalink:"/azurecharters/docs/tilda-api/referral-page-guide"},next:{title:"System Overview",permalink:"/azurecharters/docs/integration/referral-system-overview"}},c={},d=[{value:"API Connection Issues",id:"api-connection-issues",level:2},{value:"Issue: &quot;Wrong publickey length&quot; Error",id:"issue-wrong-publickey-length-error",level:3},{value:"Issue: &quot;Tilda API validation failed&quot; Error",id:"issue-tilda-api-validation-failed-error",level:3},{value:"Mock Mode Issues",id:"mock-mode-issues",level:2},{value:"Issue: Running in Mock Mode Unexpectedly",id:"issue-running-in-mock-mode-unexpectedly",level:3},{value:"Issue: Missing Mock Data for New Templates",id:"issue-missing-mock-data-for-new-templates",level:3},{value:"Multi-Project Issues",id:"multi-project-issues",level:2},{value:"Issue: Configuration Confusion Between Sites",id:"issue-configuration-confusion-between-sites",level:3},{value:"Content Synchronization Issues",id:"content-synchronization-issues",level:2},{value:"Issue: Stale Content Between Sites",id:"issue-stale-content-between-sites",level:3},{value:"Deployment Issues",id:"deployment-issues",level:2},{value:"Issue: Environment Variables Not Loading",id:"issue-environment-variables-not-loading",level:3},{value:"Diagnostic Tools",id:"diagnostic-tools",level:2},{value:"API Health Check",id:"api-health-check",level:3},{value:"Common Error Reference",id:"common-error-reference",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"tilda-api-troubleshooting-guide",children:"Tilda API Troubleshooting Guide"}),"\n",(0,i.jsx)(n.p,{children:"This guide provides solutions for common issues encountered with the Tilda API integration."}),"\n",(0,i.jsx)(n.h2,{id:"api-connection-issues",children:"API Connection Issues"}),"\n",(0,i.jsx)(n.h3,{id:"issue-wrong-publickey-length-error",children:'Issue: "Wrong publickey length" Error'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Error Message:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"error: Tilda API validation failed: Bad request line. Wrong publickey length\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Explanation:"}),"\nTilda API requires the public key to be exactly 24 characters long, but our current key is only 20 characters."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pad the Key"})," (Temporary):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# Original key: k44s07jv3fy6lxtq3kik (20 chars)\n# Padded key:   k44s07jv3fy6lxtq3kik0000 (24 chars)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Modify Validation Logic"})," (Development):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// In tildaApi.js, change:\nthis.useMockData = !this.publicKey || !this.secretKey || \n                  this.publicKey.length !== 24 || this.secretKey.length !== 32;\n\n// To:\nthis.useMockData = !this.publicKey || !this.secretKey;\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Contact Tilda Support"})," (Recommended):\nRequest properly formatted API keys that match the expected lengths."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"issue-tilda-api-validation-failed-error",children:'Issue: "Tilda API validation failed" Error'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Error Message:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"error: Tilda API validation failed: Bad request line\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Explanation:"}),"\nThe API credentials were rejected by the Tilda API server."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Verify Credentials"}),": Double-check that the API keys are correct and active"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check Subscription"}),": Ensure your Tilda Business subscription is active"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clear Whitespace"}),": Remove any accidental whitespace from your keys"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check Rate Limits"}),": Tilda may impose rate limits on API requests"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"mock-mode-issues",children:"Mock Mode Issues"}),"\n",(0,i.jsx)(n.h3,{id:"issue-running-in-mock-mode-unexpectedly",children:"Issue: Running in Mock Mode Unexpectedly"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Symptoms:"}),'\nLog shows: "TildaApiService initialized in mock data mode"']}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Explanation:"}),"\nThe API is running in mock mode when you expected it to use real API credentials."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check Validation Logic"}),": Verify that the validation in ",(0,i.jsx)(n.code,{children:"tildaApi.js"})," is correctly evaluating your credentials"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Debug Credentials"}),": Add logging to show the exact keys being used:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"console.log(`Public key: ${this.publicKey}, length: ${this.publicKey.length}`);\nconsole.log(`Secret key: ${this.secretKey}, length: ${this.secretKey.length}`);\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Force API Mode"}),": Temporarily override the mock mode detection for testing:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"this.useMockData = false; // Force API mode\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"issue-missing-mock-data-for-new-templates",children:"Issue: Missing Mock Data for New Templates"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Symptoms:"}),"\nNew templates show empty sections or errors when in mock mode."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add Mock Data"}),": Update the ",(0,i.jsx)(n.code,{children:"_getMockData"})," method in ",(0,i.jsx)(n.code,{children:"tildaApi.js"})," to include data for new templates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create Template Fallbacks"}),": Ensure templates have fallback content when data is missing"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"multi-project-issues",children:"Multi-Project Issues"}),"\n",(0,i.jsx)(n.h3,{id:"issue-configuration-confusion-between-sites",children:"Issue: Configuration Confusion Between Sites"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Symptoms:"}),"\nContent from one site appears on the other, or wrong API is being used."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Namespace Configuration"}),": Ensure all configuration is properly namespaced by project:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const mainSiteConfig = {\n  apiBaseUrl: 'https://api.tildacdn.info/v1',\n  publicKey: process.env.TILDA_PUBLIC_KEY_MAIN,\n  // ...\n};\n\nconst charterSiteConfig = {\n  apiBaseUrl: 'https://api.tildacdn.info/v1',\n  publicKey: process.env.TILDA_PUBLIC_KEY_CHARTER,\n  // ...\n};\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Add Debug Logging"}),": Add logging to trace which API service is being used:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"console.log(`Using API service for project: ${this.projectId}`);\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"content-synchronization-issues",children:"Content Synchronization Issues"}),"\n",(0,i.jsx)(n.h3,{id:"issue-stale-content-between-sites",children:"Issue: Stale Content Between Sites"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Symptoms:"}),"\nContent updates on one site aren't reflected on the other."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check Sync Triggers"}),": Verify that synchronization functions are being triggered"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Implement Webhooks"}),": Use Tilda webhooks to trigger real-time synchronization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add Manual Sync Button"}),": Provide a manual sync option in the admin interface"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"deployment-issues",children:"Deployment Issues"}),"\n",(0,i.jsx)(n.h3,{id:"issue-environment-variables-not-loading",children:"Issue: Environment Variables Not Loading"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Symptoms:"}),"\nAPI credentials not found in production environment."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Verify Environment Setup"}),": Check that environment variables are correctly set on the server"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Add Fallback Loading"}),": Implement multiple methods to load configuration:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const publicKey = process.env.TILDA_PUBLIC_KEY || \n                 fs.readFileSync('./keys/public_key.txt', 'utf8') ||\n                 config.default.publicKey;\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Improve Error Messages"}),": Add more descriptive error messages about missing configuration"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"diagnostic-tools",children:"Diagnostic Tools"}),"\n",(0,i.jsx)(n.h3,{id:"api-health-check",children:"API Health Check"}),"\n",(0,i.jsx)(n.p,{children:"Run this script to check API health:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// api-health-check.js\nrequire('dotenv').config();\nconst TildaApiService = require('./src/services/tildaApi');\n\nasync function checkApiHealth() {\n  console.log('=== Tilda API Health Check ===');\n  \n  // Check environment variables\n  console.log('\\nEnvironment check:');\n  console.log(`TILDA_PUBLIC_KEY: ${maskString(process.env.TILDA_PUBLIC_KEY)}`);\n  console.log(`TILDA_SECRET_KEY: ${maskString(process.env.TILDA_SECRET_KEY)}`);\n  console.log(`TILDA_PROJECT_ID: ${process.env.TILDA_PROJECT_ID}`);\n  \n  // Initialize API service\n  const apiService = new TildaApiService();\n  console.log(`\\nAPI Mode: ${apiService.useMockData ? 'MOCK' : 'LIVE'}`);\n  \n  if (!apiService.useMockData) {\n    try {\n      // Test API connection\n      const projects = await apiService.getProjects();\n      console.log(`\\nAPI connection successful!`);\n      console.log(`Projects found: ${projects.length}`);\n    } catch (err) {\n      console.error(`\\nAPI connection failed: ${err.message}`);\n    }\n  }\n}\n\nfunction maskString(str) {\n  if (!str) return 'undefined';\n  return str.substring(0, 4) + '***' + str.substring(str.length - 4);\n}\n\ncheckApiHealth().catch(console.error);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Run with:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"node api-health-check.js\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-error-reference",children:"Common Error Reference"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Error"}),(0,i.jsx)(n.th,{children:"Cause"}),(0,i.jsx)(n.th,{children:"Solution"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Wrong publickey length"}),(0,i.jsx)(n.td,{children:"Public key not 24 chars"}),(0,i.jsx)(n.td,{children:"Pad key or modify validation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Wrong secretkey length"}),(0,i.jsx)(n.td,{children:"Secret key not 32 chars"}),(0,i.jsx)(n.td,{children:"Pad key or modify validation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Request failed with status code 409"}),(0,i.jsx)(n.td,{children:"API conflict"}),(0,i.jsx)(n.td,{children:"Check if resource exists already"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Request failed with status code 429"}),(0,i.jsx)(n.td,{children:"Rate limiting"}),(0,i.jsx)(n.td,{children:"Implement backoff strategy"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"ENOTFOUND"}),(0,i.jsx)(n.td,{children:"DNS resolution failed"}),(0,i.jsx)(n.td,{children:"Check network and hostname"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"ECONNREFUSED"}),(0,i.jsx)(n.td,{children:"Connection refused"}),(0,i.jsx)(n.td,{children:"Check server is running and accessible"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["For more detailed API information, refer to the ",(0,i.jsx)(n.a,{href:"https://help-center.tilda.cc/api",children:"Tilda API Documentation"})," or contact ",(0,i.jsx)(n.a,{href:"mailto:support@azureyachtgroup.com",children:"support@azureyachtgroup.com"})," for assistance."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last Updated: May 23, 2025"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(6540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);